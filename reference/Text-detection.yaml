openapi: 3.1.0
info:
  title: Text-detection
  version: '1.0'
  summary: MTI AI-lab service
  description: |-
    <b>Whiteboarding exercise for AI Engineer</b>

    Background:
    - A client requires a system that receives pictures as input and outputs a text that is found within the picture. 
    - The system must be on deployed on the cloud and the text being read may contain person identifying information (PII). 
    - The average load system is expected to be 10 requests a minute, with a burst rate of 2 requests a second. The average processing time is 20 seconds, but the core component does not guarantee to return correct results. The user expects the system to return result in 30 seconds. 
    - The user can also check the results generated in the last 7 days, but images processed beyond 7 days ago are purged from the system.

    Design an architecture for such a system on a cloud that would support the requirements.

    Consider the following:
    - API(REST API) - Discuss how client will follow an approach to communicate with the service along with load balancer which is the front end of the service.
    - Application Layer – Discuss how the worker thread or hosts that will take the input, send it to the core component, obtain the result and store result in the database .
    - Persistence Layer – Database

    Final part: explain the architectural choices to non-technical audience
  contact:
    url: 'https://ailab.mti-vietnam.vn/'
    name: MTI Vietnam
  license:
    name: all rights reserved
    url: 'https://ailab.mti-vietnam.vn/'
servers:
  - url: 'http://localhost:3000/ai-lab'
paths:
  /image/async-detection:
    parameters: []
    post:
      summary: Asynchronous-text detection operation
      operationId: post-text-detection
      responses:
        '202':
          description: Accepted
          headers:
            X-detection-Id:
              schema:
                type: string
                format: uuid
                example: 401ddbba-21e8-11ec-9621-0242ac130002
              description: An unique UUID string which be generated by AI-LAB gateway service! Its also use for further fetch detection result
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    Success:
                      code: successCode
                      message: Message
                properties:
                  Success:
                    type: object
                    required:
                      - code
                      - message
                    properties:
                      code:
                        type: string
                        minLength: 1
                      message:
                        type: string
                        minLength: 1
                required:
                  - Success
              examples:
                example-1:
                  Success:
                    code: Ok
                    message: Detection request has accepted! client should keep retrying fetch the async-get-result every 10-seconds with X-Request-Id
        '400':
          description: All kind of invalid from Image-Binary
          headers:
            X-detection-Id:
              schema:
                type: string
              description: An unique UUID string which be generated by AI-LAB gateway service! Its also use for further fetch detection result
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        minLength: 1
                      message:
                        type: string
                        minLength: 1
                    required:
                      - code
                      - message
                required:
                  - error
                x-examples:
                  example-1:
                    error:
                      code: errorCode
                      message: ErrorMessage
              examples:
                example-1:
                  error:
                    code: Unsupported-File
                    message: The file extension is invalid
                example-2:
                  error:
                    code: FileSize-TooLarge
                    message: Service only accept file less then N-MB
                example-3:
                  error:
                    code: FileSchema-Invalid
                    message: The file binary is invalid
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        minLength: 1
                      message:
                        type: string
                        minLength: 1
                    required:
                      - code
                      - message
                required:
                  - error
                x-examples:
                  example-1:
                    error:
                      code: string
                      message: string
              examples:
                example-1:
                  error:
                    code: ErrorCode
                    message: Internal database error
                example-2:
                  error:
                    code: ErrorCode
                    message: Internal commnunication to Core-service error
          headers:
            X-detection-id:
              schema:
                type: string
              description: An unique UUID string which be generated by AI-LAB gateway service! Its also use for further fetch detection result
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        minLength: 1
                      message:
                        type: string
                        minLength: 1
                    required:
                      - code
                      - message
                required:
                  - error
                x-examples:
                  example-1:
                    error:
                      code: ErrorCode
                      message: Service unvailable
          headers:
            X-detection-id:
              schema:
                type: string
              description: An unique UUID string which be generated by AI-LAB gateway service! Its also use for further fetch detection result
      description: |
        - You can call this operation to submit text-detection asynchronously
        - This operation quickly respond http-202 and including a unique <b>X-detection-Id</b> from Header for further fetch detection result
      parameters: []
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: 'null'
            examples: {}
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
              required:
                - imageUrl
        description: '[image binary]'
  '/image/result-fetch/{X-detection-Id}':
    get:
      summary: Fetch text detection result operation
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
      operationId: get-image-result-fetch
      parameters: []
      description: |
        - You can call this operation to fetch a result for a specific async-detection
        - Given <b>X-detection-Id</b> from previous async-detection response
      security:
        - bearerAuth: []
    parameters:
      - schema:
          type: string
          example: 401ddbba-21e8-11ec-9621-0242ac130002
        name: X-detection-Id
        in: path
        required: true
        description: Given <b>X-detection-Id</b> from previous async-detection response
  /image/sync-detection:
    post:
      summary: ''
      operationId: post-image-sync-detection
      responses:
        '200':
          description: OK
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          scopes: {}
security:
  - API Key - 1: []
